<?php
/**
 * BuddyPress Activity component admin screen
 *
 * Props to WordPress core for the Comments admin screen and its contextual help text, on which this is heavily based.
 *
 * @package BuddyPress
 * @since 1.6
 * @subpackage Activity
 */

// Exit if accessed directly
if ( !defined( 'ABSPATH' ) ) exit;

// Include WP's list table class
if ( !class_exists( 'WP_List_Table' ) ) require( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );

// per_page screen option. Has to be hooked in extremely early.
add_filter( 'set-screen-option', 'bp_activity_admin_screen_options', 10, 3 );

/**
 * Registers the Activity component admin screen
 *
 * @global object $bp Global BuddyPress settings object
 * @since 1.6
 */
function bp_activity_add_admin_menu() {
	global $bp;

	if ( !$bp->loggedin_user->is_super_admin )
		return;

	// Add our screen
	$hook = add_menu_page( __( 'Activity', 'buddypress' ), __( 'Activity', 'buddypress' ), 'manage_options', 'bp-activity', 'bp_activity_admin' );

	// Hook into early actions to load custom CSS and our init handler.
	add_action( "admin_print_styles-$hook", 'bp_core_add_admin_menu_styles' );
	add_action( "load-$hook", 'bp_activity_admin_load' );
}
add_action( bp_core_admin_hook(), 'bp_activity_add_admin_menu' );

/**
 * Handle save/update of screen options for the Activity component admin screen
 *
 * @param string $value Will always be false unless another plugin filters it first.
 * @param string $option Screen option name
 * @param string $new_value Screen option form value
 * @return string Option value. False to abandon update.
 * @since 1.6
 */
function bp_activity_admin_screen_options( $value, $option, $new_value ) {
	if ( 'toplevel_page_bp_activity_settings_per_page' != $option )
		return $value;

	// Per page
	$new_value = (int) $new_value;
	if ( $new_value < 1 || $new_value > 999 )
		return $value;

	return $new_value;
}

/**
 * Set up the admin page before any output is sent. Register contextual help and screen options for this admin page.
 *
 * @global BP_Activity_List_Table $bp_activity_list_table Activity screen list table
 * @global WP_Screen $current_screen Current screen object
 * @since 1.6
 */
function bp_activity_admin_load() {
	global $bp_activity_list_table, $current_screen;

	// per_page screen option
	add_screen_option( 'per_page', array( 'label' => _x( 'Activities', 'Activity items per page (screen options)', 'buddypress' )) );

	// Help text
	add_contextual_help( $current_screen, '<p>' . __( 'You can manage activities made on your site similar to the way you manage comments and other content. This screen is customizable in the same ways as other management screens, and you can act on activities using the on-hover action links or the Bulk Actions.', 'buddypress' ) . '</p>' .
		'<p>' . __( 'In the Activity column, above each activity it says &#8220;Submitted on,&#8221; followed by the date and time the activity item was generated on your site. Clicking on the date/time link will take you to that activity on your live site. Hovering over any activity gives you options to reply, edit, spam mark, or delete that activity.', 'buddypress' ) . '</p>' .
		'<p>' . __( 'There are many different types of activities. Some are generated by BuddyPress automatically, and others are entered directly by a user in the form of status update. To help manage the different activity types, use the filter dropdown box to switch between them.', 'buddypress' ) . '</p>' .
		'<p><strong>' . __( 'For more information:', 'buddypress' ) . '</strong></p>' .
		'<p>' . __( '<a href="http://buddypress.org/support/">Support Forums</a>', 'buddypress' ) . '</p>'
	);

	// Create the Activity screen list table
	$bp_activity_list_table = new BP_Activity_List_Table();

	// Handle edit/reply/spam/unspam/delete of activities
	$doaction = $bp_activity_list_table->current_action();
	if ( $doaction ) {
		check_admin_referer( 'bulk-activities' );

	} elseif ( ! empty( $_GET['_wp_http_referer'] ) ) {
		 wp_redirect( remove_query_arg( array( '_wp_http_referer', '_wpnonce' ), stripslashes( $_SERVER['REQUEST_URI'] ) ) );
		 exit;
	}
}

/**
 * Outputs the Activity component admin screens
 *
 * @global BP_Activity_List_Table $bp_activity_list_table Activity screen list table
 * @since 1.6
 */
function bp_activity_admin() {
	global $bp_activity_list_table;

	$bp_activity_list_table->prepare_items();
?>

	<div class="wrap">
		<?php screen_icon( 'buddypress' ); ?>
		<h2>
			<?php if ( !empty( $_REQUEST['a'] ) ) : ?>
				<?php printf( __( 'Activity (ID #%d)', 'buddypress' ), (int) $_REQUEST['a'] ); ?>
			<?php else : ?>
				<?php _e( 'Activity', 'buddypress' ); ?>
			<?php endif; ?>

			<?php if ( !empty( $_REQUEST['s'] ) ) : ?>
				<span class="subtitle"><?php printf( __( 'Search results for &#8220;%s&#8221;', 'buddypress' ), wp_html_excerpt( esc_html( stripslashes( $_REQUEST['s'] ) ), 50 ) ); ?></span>
			<?php endif; ?>
		</h2>

		<?php $bp_activity_list_table->views(); ?>

		<form id="bp-activities-form" action="" method="get">
			<?php $bp_activity_list_table->search_box( __( 'Search Activities', 'buddypress' ), 'bp-activity' ); ?>

			<input type="hidden" name="page" value="<?php echo esc_attr( $_REQUEST['page'] ); ?>" />
			<?php $bp_activity_list_table->display(); ?>
		</form>
	</div>

<?php
}

/**
 * List table class for the Activity component admin page.
 *
 * @since 1.6
 */
class BP_Activity_List_Table extends WP_List_Table {
	/**
	 * What type of view is being displayed? e.g. "All", "Pending", "Approved", "Spam"...
	 *
	 * @since 1.6
	*/
	public $view = 'all';

	/**
	 * How many activity items have been marked as spam.
	 *
	 * @since 1.6
	 */
	public $spam_count = 0;

	/**
	 * Constructor
	 *
	 * @global $bp BuddyPress global settings
	 * @since 1.6
	 */
	public function __construct() {
		global $bp;

		// Define singular and plural labels, as well as whether we support AJAX.
		parent::__construct( array(
			'ajax'     => false,
			'plural'   => 'activities',
			'singular' => 'activity',
		) );
	}

	/**
	 * Handle filtering of data, sorting, pagination, and any other data-manipulation required prior to rendering.
	 *
	 * @since 1.6
	 */
	function prepare_items() {
		$screen = get_current_screen();

		// Option defaults
		$filter       = array();
		$activity     = false;
		$search_terms = false;
		$sort         = 'DESC';
		$spam         = 'ham_only';

		// Set current page
		$page = $this->get_pagenum();

		// Set per page from the screen options
		$per_page = $this->get_items_per_page( str_replace( '-', '_', "{$screen->id}_per_page" ) );

		// Check if we're on the "Spam" view
		if ( !empty( $_REQUEST['activity_status'] ) && 'spam' == $_REQUEST['activity_status'] ) {
			$spam       = 'spam_only';
			$this->view = 'spam';
		}

		// Sort order
		if ( !empty( $_REQUEST['order'] ) && 'desc' != $_REQUEST['order'] )
			$sort = 'ASC';

		// Order by
		/*if ( !empty( $_REQUEST['orderby'] ) ) {
		}*/

		// Filter
		if ( !empty( $_REQUEST['activity_type'] ) )
			$filter = array( 'action' => $_REQUEST['activity_type'] );

		// Are we doing a search?
		if ( !empty( $_REQUEST['s'] ) )
			$search_terms = $_REQUEST['s'];

		// Check if user has clicked on a specific activity (if so, fetch only that, and any related, activity).
		if ( !empty( $_REQUEST['a'] ) )
			$activity = (int) $_REQUEST['a'];

		// Get the spam total (ignoring any search query or filter)
		$spams = bp_activity_get( array(
			'display_comments' => 'stream',
			'show_hidden'      => true,
			'spam'             => 'spam_only',
		) );
		$this->spam_count = $spams['total'];
		unset( $spams );

		// Get the activites from the database
		$activities = bp_activity_get( array(
			'display_comments' => 'stream',
			'filter'           => $filter,
			'in'               => $activity,
			'page'             => $page,
			'per_page'         => $per_page,
			'search_terms'     => $search_terms,
			'show_hidden'      => true,
			//'sort'             => $sort,
			'spam'             => $spam,
		) );

		// bp_activity_get returns an array of objects; cast these to arrays for WP_List_Table.
		$new_activities = array();
		foreach ( $activities['activities'] as $activity_item )
			$new_activities[] = (array) $activity_item;

		// Set raw data to display
		$this->items       = $new_activities;
		$this->extra_items = array();

		// Store information needed for handling table pagination
		$this->set_pagination_args( array(
			'per_page'    => $per_page,
			'total_items' => $activities['total'],
			'total_pages' => ceil( $activities['total'] / $per_page )
		) );
	}

	/**
	 * Get an array of all the columns on the page
	 *
	 * @return array
	 * @since 1.6
	 */
	function get_column_info() {
		$this->_column_headers = array(
			$this->get_columns(),
			array(),
			$this->get_sortable_columns(),
		);

		return $this->_column_headers;
	}

	/**
	 * Displays a message on screen when no items are found (e.g. no search matches)
	 *
	 * @since 1.6
	 */
	function no_items() {
		_e( 'No activities found.', 'buddypress' );
	}

	/**
	 * Outputs the Activity data table
	 *
	 * @since 1.6
	*/
	function display() {
		extract( $this->_args );

		$this->display_tablenav( 'top' );
	?>

		<table class="<?php echo implode( ' ', $this->get_table_classes() ); ?>" cellspacing="0">
			<thead>
				<tr>
					<?php $this->print_column_headers(); ?>
				</tr>
			</thead>

			<tfoot>
				<tr>
					<?php $this->print_column_headers( false ); ?>
				</tr>
			</tfoot>

			<tbody id="the-comment-list" class="list:comment">
				<?php $this->display_rows_or_placeholder(); ?>
			</tbody>

			<tbody id="the-extra-comment-list" class="list:comment" style="display: none;">
				<?php $this->items = $this->extra_items; $this->display_rows(); ?>
			</tbody>
		</table>
		<?php

		$this->display_tablenav( 'bottom' );
	}

	/**
	 * Get the list of views available on this table (e.g. "all", "spam").
	 *
	 * @since 1.6
	 */
	function get_views() {
	?>
		<ul class="subsubsub">
			<li class="all"><a href="<?php echo remove_query_arg( 'activity_status' ); ?>" class="<?php if ( 'spam' != $this->view ) echo 'current'; ?>"><?php _e( 'All', 'buddypress' ); ?></a> |</li>
			<li class="spam"><a href="<?php echo add_query_arg( 'activity_status', 'spam' ); ?>" class="<?php if ( 'spam' == $this->view ) echo 'current'; ?>"><?php printf( __( 'Spam (%d)', 'buddypress' ), $this->spam_count ); ?></a></li>
		</ul>
	<?php
	}

	/**
	 * Get bulk actions
	 *
	 * @return array Key/value pairs for the bulk actions dropdown
	 * @since 1.6
	 */
	function get_bulk_actions() {
		$actions = array();
		$actions['spam']   = __( 'Mark as Spam', 'buddypress' );
		$actions['unspam'] = __( 'Not Spam', 'buddypress' );
		$actions['delete'] = __( 'Delete Permanently', 'buddypress' );

		return $actions;
	}

	/**
	 * Get the table column titles.
	 *
	 * @see WP_List_Table::single_row_columns()
	 * @return array
	 * @since 1.6
	 */
	function get_columns() {
		return array(
			'cb'       => '<input name type="checkbox" />',
			'author'   => __( 'Author', 'buddypress' ),
			'comment'  => __( 'Activity', 'buddypress' ),
			'response' => __( 'In Response To', 'buddypress' ),
		);
	}

	/**
	 * Get the column names for sortable columns
	 *
	 * @return array
	 * @since 1.6
	 * @todo For this to work, BP_Activity_Activity::get() needs updating to supporting ordering by specific fields
	 */
	function get_sortable_columns() {
		return array();

		/*return array(
			'author' => array( 'activity_author', false ),  // Intentionally not using "=>"
		);*/
	}

	/**
	 * Markup for the "filter" part of the form (i.e. which activity type to display)
	 *
	 * @param string $which 'top' or 'bottom'
	 * @since 1.6
	 */
	function extra_tablenav( $which ) {
		if ( 'bottom' == $which )
			return;
	?>
		<div class="alignleft actions">
			<select name="activity_type">
				<option value=""><?php _e( 'Show all activity types', 'buddypress' ); ?></option>
				<option value="activity_update"><?php _e( 'Status Updates', 'buddypress' ); ?></option>
				<option value="activity_comment"><?php _e( 'Status Update Comments', 'buddypress' ); ?></option>

				<?php if ( bp_is_active( 'blogs' ) ) : ?>
					<option value="new_blog_post"><?php _e( 'Posts', 'buddypress' ); ?></option>
					<option value="new_blog_comment"><?php _e( 'Comments', 'buddypress' ); ?></option>
				<?php endif; ?>

				<?php if ( bp_is_active( 'forums' ) ) : ?>
					<option value="new_forum_topic"><?php _e( 'Forum Topics', 'buddypress' ); ?></option>
					<option value="new_forum_post"><?php _e( 'Forum Replies', 'buddypress' ); ?></option>
				<?php endif; ?>

				<?php if ( bp_is_active( 'groups' ) ) : ?>
					<option value="created_group"><?php _e( 'New Groups', 'buddypress' ); ?></option>
					<option value="joined_group"><?php _e( 'Group Memberships', 'buddypress' ); ?></option>
				<?php endif; ?>

				<?php if ( bp_is_active( 'friends' ) ) : ?>
					<option value="friendship_accepted"><?php _e( 'Friendships Accepted', 'buddypress' ); ?></option>
					<option value="friendship_created"><?php _e( 'New Friendships', 'buddypress' ); ?></option>
				<?php endif; ?>

				<option value="new_member"><?php _e( 'New Members', 'buddypress' ); ?></option>
				<option value="new_avatar"><?php _e( 'New Member Avatar', 'buddypress' ); ?></option>

				<?php do_action( 'bp_activity_filter_options' ); ?>
			</select>

			<?php submit_button( __( 'Filter', 'buddypress' ), 'secondary', false, false, array( 'id' => 'post-query-submit' ) ); ?>
		</div>
	<?php
	}

	/**
	 * Checkbox column
	 *
	 * @param array $item A singular item (one full row)
	 * @see WP_List_Table::single_row_columns()
	 * @since 1.6
	 */
	function column_cb( $item ) {
		printf( '<input type="checkbox" name="activity_id[]" value="%d" />', (int) $item['id'] );
	}

	/**
	 * Author column
	 *
	 * @param array $item A singular item (one full row)
	 * @see WP_List_Table::single_row_columns()
	 * @since 1.6
	 */
	function column_author( $item ) {
		echo '<strong>' . get_avatar( $item['user_id'], '32' ) . ' ' . bp_core_get_userlink( $item['user_id'] ) . '</strong>';
	}

	/**
	 * Content column, and "quick admin" rollover actions.
	 *
	 * Called "comment" in the CSS so we can re-use some WP core CSS.
	 *
	 * @param array $item A singular item (one full row)
	 * @see WP_List_Table::single_row_columns()
	 * @since 1.6
	 */
	function column_comment( $item ) {
		// Determine what type of item (row) we're dealing with
		if ( $item['is_spam'] )
			$item_status = 'spam';
		else
			$item_status = 'all';

		// Preorder items: Reply | Edit | Spam | Delete Permanently
		$actions = array(
			'reply'  => '',
			'edit'   => '',
			'spam'   => '', 'unspam' => '',
			'delete' => '',
		);

		// Get rollover actions.
		// Reply
		if ( 'spam' != $item_status )
			$actions['reply'] = sprintf( '<a href="%s">%s</a>', esc_attr( '#' ), __( 'Reply', 'buddypress' ) );

		// Edit
		$actions['edit'] = sprintf( '<a href="%s">%s</a>', esc_attr( '#' ), __( 'Edit', 'buddypress' ) );

		// Spam/unspam
		if ( 'spam' == $item_status )
			$actions['unspam'] = sprintf( '<a href="%s">%s</a>', esc_attr( '#' ), __( 'Not Spam', 'buddypress' ) );
		else
			$actions['spam'] = sprintf( '<a href="%s">%s</a>', esc_attr( '#' ), __( 'Spam', 'buddypress' ) );

		// Delete
		$actions['delete'] = sprintf( '<a href="%s">%s</a>', esc_attr( '#' ), __( 'Delete Permanently', 'buddypress' ) );

		// Start timestamp
		echo '<div class="submitted-on">';

		// Other plugins can filter which actions are shown
		$actions = apply_filters( 'bp_activity_admin_comment_row_actions', array_filter( $actions ), $item );

		/* translators: 2: activity admin ui date/time */
		printf( __( 'Submitted on <a href="%1$s">%2$s at %3$s</a>', 'buddypress' ), bp_get_root_domain() . '/' . bp_get_activity_root_slug() . '/p/' . $item['id'] . '/', date_i18n( get_option( 'date_format' ), strtotime( $item['date_recorded'] ) ), date_i18n( get_option( 'time_format' ), strtotime( $item['date_recorded'] ) ) );

		// End timestamp
		echo '</div>';

		// Get activity item content
		$content = apply_filters_ref_array( 'bp_get_activity_content_body', array( $item['content'] ) );

		echo $content . ' ' . $this->row_actions( $actions );
	}

	/**
	 * "In response to" column
	 *
	 * @param array $item A singular item (one full row)
	 * @see WP_List_Table::single_row_columns()
	 * @since 1.6
	 */
	function column_response( $item ) {
		// Does this activity have a parent?
		if ( empty( $item['secondary_item_id'] ) )
			return;

		/* translators: 1: activity admin screen permalink, 2: activity ID */
		printf( __( '<a href="%1$s">Activity ID #%2$d</a>', 'buddypress' ), network_admin_url( 'admin.php?page=bp-activity&a=' . $item['secondary_item_id'] ), $item['secondary_item_id'] );
	}
}?>